提交
1.git add把文件添加进去，把文件修改添加到暂存区；
2.git commit -m -m后面输入的是本次提交的说明,提交更改，把暂存区的所有内容
提交到当前分支，暂存区会清空。

版本回退
1.git log命令显示从最近到最远的提交日志
2.git reflog用来查看命令历史，以便确定要回到未来的哪个版本。
3.git reset --hard HEAD^ 回退到上一个版本,HEAD表示当前版本 
上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写成HEAD~100。
 HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，
使用命令git reset --hard commit_id。
4.git reset --hard 版本号   重返未来


修改
1.git status  显示文件状态
2.git diff file 查看文件不同

撤销修改
1.git checkout -- filename 可以丢弃工作区的修改
2.git reset HEAD filename可以把暂存区的修改撤销掉（unstage），
 重新放回工作区
删除文件
1.rm file 从工作区删除文件
2.git rm file 从版本库中删除该文件，并且git commit
2.git checkout -- file 其实是用版本库里的版本替换工作区的版本，无论工作区
是修改还是删除，都可以“一键还原”

提交远程
1.ssh-keygen -t rsa -C "youremail@example.com"创建SSH Key，主目录>>.ssh目录>>id_rsa和id_rsa.pub
2.git remote add origin git@github.com:michaelliao/learngit.git 关联远程仓库
3.git push -u origin master 把本地库的所有内容推送到远程库上
4.git push origin master 修改后提交远程仓库
5.git remote rm <name> 删除远程仓库
6.git branch -a 查看远程分支

远程拷贝
1.git clone git@github.com:michaelliao/gitskills.git 克隆一个本地库
2.cd   ls

分支
1.查看分支：git branch
2.创建分支：git branch <name>
3.切换分支：git checkout <name>
4.创建+切换分支：git checkout -b <name>
5.合并某分支到当前分支：git merge <name>
6.删除分支：git branch -d <name>
7.查看分支合并情况：git log --graph --pretty=oneline --abbrev-commit
8.使用--no-ff 合并：git merge --no-ff -m "merge" <name>
  合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，
能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

修复bug
1.git stash 把当前工作现场“储藏”起来
2.git stash pop恢复工作现场并删除储藏区
3.git stash list查看工作现场

文本操作
1.vi file 进入文本操作
2.i 进入编辑
3.esc 退出编辑
4. :wq! 保存并退出
